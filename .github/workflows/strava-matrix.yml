name: Strava sync (from-file matrix)

on:
  workflow_dispatch:
    inputs:
      file:
        description: 'Relative path to athlete file (txt or csv)'
        required: false
        default: 'athletes.txt'
      start_index:
        description: 'Optional start index (0-based) to batch'
        required: false
        default: '0'
      end_index:
        description: 'Optional end index (exclusive) to batch'
        required: false
        default: '0'

permissions:
  contents: write

jobs:
  build-matrix-from-file:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build matrix JSON from file
        id: gen-matrix
        run: |
          FILE="${{ github.event.inputs.file }}"
          START_IDX="${{ github.event.inputs.start_index }}"
          END_IDX="${{ github.event.inputs.end_index }}"

          python - <<'PY' > athletes.json
          import sys, json, csv, os

          file_path = os.environ.get("FILE")
          start = int(os.environ.get("START_IDX", "0") or 0)
          end = int(os.environ.get("END_IDX", "0") or 0)

          if not os.path.exists(file_path):
              print(json.dumps({"include": []}))
              sys.exit(0)

          ids = []
          # If CSV, parse as CSV with header(s)
          if file_path.lower().endswith(".csv"):
              with open(file_path, newline='', encoding='utf-8') as fh:
                  reader = csv.DictReader(fh)
                  for r in reader:
                      for h in ("athlete_id","Athlete ID","id","athlete"):
                          if h in r and r[h] is not None and str(r[h]).strip() != "":
                              ids.append(str(r[h]).strip())
                              break
          else:
              # plain text: one id per line
              with open(file_path, encoding='utf-8') as fh:
                  for line in fh:
                      v = line.strip()
                      if v:
                          ids.append(v)

          # apply optional slicing (batching)
          if end and end > 0:
              slice_ids = ids[start:end]
          else:
              slice_ids = ids[start:]

          include = [{"athlete_id": x} for x in slice_ids]
          print(json.dumps({"include": include}))
          PY
        env:
          FILE: ${{ github.event.inputs.file }}
          START_IDX: ${{ github.event.inputs.start_index }}
          END_IDX: ${{ github.event.inputs.end_index }}

      - name: Show matrix JSON (debug)
        run: |
          cat athletes.json || true

      - name: set output
        id: set-matrix
        run: echo "matrix=$(cat athletes.json)" >> $GITHUB_OUTPUT

  run-athlete:
    needs: build-matrix-from-file
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix-from-file.outputs.matrix) }}  # <-- pass the whole object
      max-parallel: 2   # ADJUST: set to 1 or 2 if Strava rate limits are a concern
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install runtime deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Show matrix entry (debug)
        run: |
          echo "Matrix entry: ${{ toJson(matrix) || matrix }}" || true

      - name: Run download for athlete
        env:
          TARGET_ATHLETE_ID: ${{ matrix.athlete_id }}
          # keep these if your script still needs to access the sheet or Strava
          GOOGLE_SHEETS_JSON: ${{ secrets.GOOGLE_SHEETS_JSON }}
          SHEET_URL: ${{ secrets.SHEET_URL }}
          STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
        run: |
          echo "Running for athlete: $TARGET_ATHLETE_ID"
          python download_one_from_sheet.py

      - name: Commit outputs (optional)
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add strava_output || true
          git commit -m "Strava outputs: $TARGET_ATHLETE_ID" || echo "no changes"
          git push || echo "push failed"
